#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
  vec2 pos;
  vec2 vel;
};

// LOOK: These bindings correspond to the DescriptorSetLayouts and
// the DescriptorSets from prepareCompute()!

// Binding 0 : Particle storage buffer (read)
layout(std140, binding = 0) buffer ParticlesA
{
   Particle particlesA[ ];
};

// Binding 1 : Particle storage buffer (write)
layout(std140, binding = 1) buffer ParticlesB
{
   Particle particlesB[ ];
};

layout (local_size_x = 16, local_size_y = 16) in;

// LOOK: rule weights and distances, as well as particle count, based off uniforms.
// The deltaT here has to be updated every frame to account for changes in
// frame rate.
layout (binding = 2) uniform UBO
{
  float deltaT;
  float rule1Distance;
  float rule2Distance;
  float rule3Distance;
  float rule1Scale;
  float rule2Scale;
  float rule3Scale;
  int particleCount;
} ubo;

void main()
{
    // LOOK: This is very similar to a CUDA kernel.
    // Right now, the compute shader only advects the particles with their
    // velocity and handles wrap-around.
    // TODO: implement flocking behavior.

    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
    // Don't try to write beyond particle count
    if (index >= ubo.particleCount) return;

    // Read position and velocity
    vec2 thisPos = particlesA[index].pos.xy;
    vec2 thisVel = particlesA[index].vel.xy;
    vec2 center = vec2(0);

    for (int i = 0; i < ubo.particleCount; i++) {
      vec2 thatPos = particlesA[i].pos.xy;
      float dist = distance(thisPos, thatPos);

      // Rule 1: Cohesion: boids fly towards the center of mass of neighboring
      // boids
      if (dist < rule1Distance) { 
        center += thatPos; 
        neighborCount++;
      }

      // Rule 2: Separation: boids try to keep a small distance away from
      // each other 
      if (dist < rule2Distance) { 
        separate -= thatPos - thisPos; 
      }

      // Rule 3: Alignment: boids try to match the velocities of neighboring
      // boids
      if (dist < rule3Distance) { 
        cohesion += particlesA[i].vel.xy;
      }
    }

    vec3 toCenter(0);
    if (neighborCount > 0) { 
      center /= neighborCount; 
      toCenter = (center - thisPos); 
    } 

    thisVel = toCenter * rule1Scale 
            + separate * rule2Scale 
            + cohesion * rule3Scale;


    // clamp velocity for a more pleasing simulation.
    thisVel = normalize(thisVel) * clamp(length(thisVel), 0.0, 0.1);

    // kinematic update
    thisPos += thisVel * ubo.deltaT;

    // Wrap around boundary
    if (thisPos.x < -1.0) thisPos.x =  1.0;
    if (thisPos.x >  1.0) thisPos.x = -1.0;
    if (thisPos.y < -1.0) thisPos.y =  1.0;
    if (thisPos.y >  1.0) thisPos.y = -1.0;

    particlesB[index].pos.xy = thisPothisPos

    // Write back
    particlesB[index].vel.xy = thisVel;
}
